@page "/availabletimes"
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>AvailableTimes</h3>

@if (availableTimes == null)
{
        <p><em>Loading...</em></p>
}
else
{
     <table class="available-table">
        <thead>
            <tr>
                <th></th>
                <th>Start</th>
                <th>End</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var time in availableTimes)
            {

                <tr>
                   <td><input type="checkbox" @bind="time.IsChecked" /></td>
                   <td>@time.Start</td>
                   <td>@time.End</td>
                </tr> 
             
            }
            </tbody>
     </table>

    //form to get summary description and location
    <h3>Schedule Event</h3>
   
    <EditForm Model="reason">
        <div class="form-group col-sm-4">
            <label for="summary">Summary</label>
            <InputText class="form-control" id="summary" @bind-Value="reason.summary" />
            <label for="decription">Desciption</label>
            <InputText class="form-control" id="description" @bind-Value="reason.description" />
        </div>
        <button class="btn btn-primary" @onclick="ScheduleSelected">Schedule</button>
    </EditForm>

   
     
     
}

@code {

    private class ReasonDetails
    {
        public string summary { get; set; }
        public string description { get; set; }
    }

    private ReasonDetails reason = new ReasonDetails();

    private AvailableTimeBlock[] availableTimes;

    protected override async Task OnInitializedAsync()
    {
        availableTimes = await Http.GetFromJsonAsync<AvailableTimeBlock[]>($"https://localhost:7226/available-hour-blocks");
    }

    public class AvailableTimeBlock
    {
        public string Summary { get; set; }
        public string Description { get; set; }        
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public bool IsChecked { get; set; }

    }

    public async Task ScheduleSelected()
    {


        var selectedTimes = availableTimes.Where(t => t.IsChecked);
        foreach (var time in selectedTimes)
        {
            var eventRequest = new AvailableTimeBlock()
            {


                    Summary = reason.summary,
                    Description = reason.description,
                    Start = time.Start,
                    End = time.End,

            };

            var apiUrl = "https://localhost:7226/schedule";
            HttpResponseMessage response = await Http.PostAsJsonAsync(apiUrl, eventRequest);                      
            response.EnsureSuccessStatusCode();

            if (response.IsSuccessStatusCode == true)
            {
                SuccessSchedule();
            }
                       
        }
               
        
    }

    private void SuccessSchedule()
    {
        NavigationManager.NavigateTo("/");
    }
   
}
